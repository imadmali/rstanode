% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stan_ode.R
\name{stan_ode}
\alias{stan_ode}
\title{Simulating/Fitting ODE Systems via Stan}
\usage{
stan_ode(func, state, pars, times, t0 = NULL, integrator = c("rk45", "bdf"),
  sampling = FALSE, events = NULL, ...)
}
\arguments{
\item{func}{A function (currently \code{if-else} statements are not supported).}

\item{state}{A named vector of the initial conditions of the state variables.}

\item{pars}{A named vector of the parameter values.}

\item{times}{A sequence of time steps.}

\item{t0}{Initial time. The default (\code{NULL}) is \code{t0 = times[1] - 1e-6}}

\item{integrator}{The type of integrator to use.}

\item{sampling}{A logical declaration as to whether you want sample the parameters or
initial state values. The default is \code{FALSE}.}

\item{events}{A dataframe that defines the event schedule in the ODE system.
See details below.}

\item{...}{Optional parameters for \code{\link[rstan]{stan}}.}
}
\value{
A list that contains the simulations and the \code{stanfit} object.
}
\description{
Ordinary differential equation (ODE) simulation and parameter estimation.
The behavior is similar to the \code{\link[deSolve]{ode}} function in the \pkg{deSolve} package.
Particularly, the user may use the same ODE function, inital state values, parameter values
used in \code{ode}.
}
\details{
Currently the user cannot use the event dataframe used in \code{\link[deSolve]{ode}}.
The dimensions of the events dataframe equals [number of events] by [number of state variables
+ 2]. There must be a column denoting the \strong{time} of each event, the \strong{method} to
apply to the state variables, and the \strong{value of each state} variable that the user
wants to apply to the last simulated value using the aforementioned method.

Some examples of event schedules are provided below.
The event schedule below is adding 5 to the last simulated state variable y1 in all events
accept for the one at taking place time = 40 where 5 is being added to y1 \emph{and} 2 is
being added to y2.
\tabular{ccccc}{
time \tab y1 \tab y2 \tab ... \tab method\cr
10 \tab 5 \tab 0 \tab ... \tab add\cr
20 \tab 5 \tab 0 \tab ... \tab add\cr
30 \tab 5 \tab 0 \tab ... \tab add\cr
40 \tab 5 \tab 2 \tab ... \tab add
}
The event schedule below is multiplying 1.5 with the last simulated value of y1 and leaving y2
unchanged.
\tabular{ccccc}{
time \tab y1 \tab y2 \tab ... \tab method\cr
10 \tab 1.5 \tab 1 \tab ... \tab multiply\cr
20 \tab 1.5 \tab 1 \tab ... \tab multiply\cr
30 \tab 1.5 \tab 1 \tab ... \tab multiply
}
}
\examples{
\dontrun{
# Simple ODE
f <- function(y, t, p) {
  dy1 <- y2
  dy2 <- -y1 - theta1 * y2
  return(dy1 = dy1, dy2 = dy2)
}
fit <- stan_ode(f, state = c("y1" = 2, "y2" = 5),
                pars = c("theta1" = 0.5),
                times = seq(1,10,by=0.01), t0 = 0,
                integrator = "bdf",
                sampling = FALSE)
sims <- extract(fit, pars = "y_hat")
sims <- unname(unlist(sims))

# Simple Harmonic Oscillator
sho <- function(y, p ,t) {
  dy1 = y2
  dy2 = -y1 - theta * y2
  return(list(dy1, dy2))
}

fit <- stan_ode(sho, state = c("y1" = 1, "y2" = 0),
                pars = c("theta" = 0.15),
                times = seq(1,50,by=0.1), t0 = 0,
                integrator = "bdf",
                sampling = FALSE)

sims <- extract(fit, pars = "y_hat")$y_hat[1,,]
plot(sims[,1], sims[,2], type = "l", lwd = 2,
     xlab = "y1", ylab = "y2", main = "Simple Harmonic Oscillator")
}

}
\seealso{
\code{\link[deSolve]{ode}}, \code{\link[rstan]{stan}}.
}
